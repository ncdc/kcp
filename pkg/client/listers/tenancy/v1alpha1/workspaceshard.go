/*
Copyright 2022 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	rest "k8s.io/client-go/rest"
	"k8s.io/client-go/tools/cache"

	v1alpha1 "github.com/kcp-dev/kcp/pkg/apis/tenancy/v1alpha1"
)

// WorkspaceShardLister helps list WorkspaceShards.
// All objects returned here must be treated as read-only.
type WorkspaceShardLister interface {
	Scoped(scope rest.Scope) WorkspaceShardLister
	// List lists all WorkspaceShards in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WorkspaceShard, err error)
	// Get retrieves the WorkspaceShard from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.WorkspaceShard, error)
	WorkspaceShardListerExpansion
}

// workspaceShardLister implements the WorkspaceShardLister interface.
type workspaceShardLister struct {
	indexer cache.Indexer
	scope   rest.Scope
}

// NewWorkspaceShardLister returns a new WorkspaceShardLister.
func NewWorkspaceShardLister(indexer cache.Indexer) WorkspaceShardLister {
	return &workspaceShardLister{indexer: indexer}
}

func (s *workspaceShardLister) Scoped(scope rest.Scope) WorkspaceShardLister {
	return &workspaceShardLister{
		indexer: s.indexer,
		scope:   scope,
	}
}

// List lists all WorkspaceShards in the indexer.
func (s *workspaceShardLister) List(selector labels.Selector) (ret []*v1alpha1.WorkspaceShard, err error) {
	var indexValue string
	if s.scope != nil {
		indexValue = s.scope.Name()
	}
	err = cache.ListAllByIndexAndValue(s.indexer, cache.ListAllIndex, indexValue, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WorkspaceShard))
	})
	return ret, err
}

// Get retrieves the WorkspaceShard from the index for a given name.
func (s *workspaceShardLister) Get(name string) (*v1alpha1.WorkspaceShard, error) {
	key := name
	if s.scope != nil {
		key = s.scope.CacheKey(key)
	}
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("workspaceshard"), name)
	}
	return obj.(*v1alpha1.WorkspaceShard), nil
}
